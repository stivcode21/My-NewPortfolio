{
  "head": {
    "title": "Projects",
    "option-moreOptions": "More options",
    "option-share": "Share",
    "option-goUp": "Go up",
    "text-1": "Each work ",
    "strong-1": "not only shows my technical skills, ",
    "text-2": "but also my ",
    "strong-2": "creative approach and dedication to creating design solutions ",
    "text-3": "that are ",
    "strong-3": "usable, accessible and aesthetic.",
    "btn1": "Former",
    "btn2": "Following"
  },
  "parkify": {
    "description": "Parkify is a responsive web application for parking lot management. It started as a Figma design and evolved into a fullstack functional app using Supabase, without the need for a custom backend. It features user authentication, access control, CRUD operations for vehicles, history tracking, lockers management, and more.",
    "shortDescription": "Web app for managing parking lots with authentication and complete user control.",
    "objective": "The goal of Parkify was to build a complete digital solution that allows intuitive and secure management of parking lots directly from the browser. The aim was to develop a platform that includes vehicle registration, activity history, locker management, user control, and proper validation while learning modern technologies throughout the process.",
    "development": "I initially started the project using Astro, but migrated to React due to the need for a more dynamic interface. For the backend, I used Supabase, which enabled me to implement authentication via magic link, session management, secure database queries, and SQL-based row-level security policies. I used React Router to protect routes based on the user's state (authenticated, new profile creation, etc.). I also implemented toast notifications to inform users about the outcome of their actions and built a complete parking management system with features like vehicle check-in, check-out, history logs, and locker tracking.",
    "conclusion": "Parkify was my first experience creating a fully functional fullstack app. It helped me learn about databases, modern authentication methods, and route control in React. Although it is still in beta, it is fully operational, and I plan to continue improving it. I'm proud of the learning process and of having turned a simple design into a real, useful, and scalable application."
  },
  "viflow": {
    "description": "ViFlow is a social network developed with TypeScript that allows users to register, create profiles, post content, interact with posts and comment. With a fully responsive design and advanced route handling, it offers an experience with unique features.",
    "shortDescription": "Interactive social network with user registration, posts and comments.",
    "objective": "The project emerged to address the need for a minimalist yet functional social network, aiming to create a platform where users can share content, interact and form communities, implementing key features like registration, profiles, posts and comments with TypeScript to ensure scalability and maintainability.",
    "development": "I used React with TypeScript for frontend development, implementing react-router for navigation. For the UI, I prioritized a responsive design with Tailwind, integrating Zustand for global states and real-time interactions.",
    "conclusion": "The result was a functional application that demonstrated my ability to solve complex problems in social environments. Key learnings include: the importance of typing in large projects (TypeScript), strategies for managing global states in social applications, and how to design intuitive interfaces for complex interaction flows."
  },
  "urbanShop": {
    "description": "Urban Shop is an online store designed for selling shoes and caps, with an attractive and dynamic interface. I developed a complete e-commerce with main functionalities like persistent shopping cart and interactive sliders, providing a smooth and intuitive user experience.",
    "shortDescription": "Functional shoes and caps e-commerce with persistent cart and dynamic design.",
    "objective": "The project aimed to create a functional e-commerce for UrbanShop that would solve typical online store challenges: shopping cart management, attractive product display and data persistence between sessions, with the goal of offering a smooth and professional user experience.",
    "development": "I implemented a robust architecture with React and Redux Toolkit to manage the global cart state, integrating localStorage for data persistence. For the interface, I used TailwindCSS along with SplideJS to create interactive sliders, developing a fully responsive design with Vite as build tool to optimize performance.",
    "conclusion": "The result was a 100% functional online store with persistent cart and optimized loading time. Key learnings include: mastering Redux Toolkit for state management, advanced persistence techniques with localStorage, and how to implement professional sliders with SplideJS in React applications."
  },
  "frameonix": {
    "description": "Frameonix is the web platform designed to document my component library, providing a detailed introduction, installation and usage guide, information on how to contribute and specific documentation for each available component. This website features a dynamic interface, route-based navigation, and an intuitive design to ensure an excellent user experience.",
    "shortDescription": "Complete and interactive documentation for my Frameonix component library.",
    "objective": "The project was born to solve the challenge of efficiently documenting the FrameOnix library, with the clear goal of creating a platform that would allow other developers to quickly understand its operation, installation and use, reducing the learning curve and promoting library adoption.",
    "development": "I developed a complete solution with React and Vite to optimize performance, implementing react-router-dom for section navigation and i18next for multilingual support. I used IntersectionObserver for active section detection and created interactive components like a simulated terminal, all with TailwindCSS to ensure a responsive and consistent design.",
    "conclusion": "The resulting documentation proved to be intuitive and effective, significantly improving developers' experience when using the library. Key learnings include: advanced route handling in React, i18next internationalization implementation, and techniques for creating interactive documentation that improves tool adoption."
  },
  "cineverse": {
    "description": "Cineverse es una plataforma interactiva de películas y series desarrollada con React que consume la API de TMDB para mostrar información actualizada. El proyecto cuenta con una interfaz rediseñada, totalmente responsiva, con una estructura de código más limpia y componentes reutilizables. Un banner dinámico resalta el contenido en tendencia, mientras que un menú desplegable permite navegar entre categorías de películas y series. Cada elemento redirige a una ruta dinámica con una vista previa detallada, al estilo Netflix, mostrando un banner grande y descripciones completas. La aplicación integra librerías como React Router, Lucide Icons y animaciones tipográficas para mejorar la experiencia.",
    "shortDescription": "Plataforma de películas y series con API de TMDB, rutas dinámicas, categorías desplegables y vistas previas tipo Netflix.",
    "objective": "El proyecto tuvo como objetivo ofrecer una mejor experiencia de descubrimiento de películas y series consumiendo la API de TMDB, mejorando tanto la interfaz de usuario como la arquitectura del código. Se buscó crear una plataforma con navegación dinámica, rutas estructuradas y componentes reutilizables, manteniendo un diseño atractivo y adaptable a cualquier dispositivo.",
    "development": "Refactoricé el proyecto para optimizar su estructura, componentizando grandes secciones y limpiando código redundante. Implementé React Router para manejar rutas dinámicas, permitiendo vistas únicas para cada película o serie. El navbar fue rediseñado en forma de menú desplegable para acceder de manera más intuitiva a las categorías. También integré Lucide Icons para mejorar el apartado visual y una librería de animaciones tipográficas para dinamismo en los textos. Apliqué técnicas de gestión de estado y carga diferida para garantizar rendimiento, además de mejorar la experiencia responsive en distintos dispositivos.",
    "conclusion": "El resultado es una plataforma totalmente funcional y escalable que ofrece contenido actualizado diariamente de películas y series, con un diseño moderno y fluido. Los principales aprendizajes fueron: manejo avanzado de rutas en React, mejoras de UI/UX con animaciones e íconos, refactorización y componentización de proyectos, y prácticas avanzadas de diseño responsive."
  },
  "whatsappClone": {
    "description": "WhatsApp Clone is a frontend web developed together with 6 colleagues, where we replicated and customized various sections of the official WhatsApp web. The main goal was to gain teamwork experience and expand my knowledge using frameworks, as it was my first time working with them. We implemented key functionalities and customized the user experience.",
    "shortDescription": "WhatsApp Web replica developed in team with React and Material UI.",
    "objective": "The project was born as a collaborative learning exercise to replicate WhatsApp Web functionality, with the goal of gaining teamwork experience and familiarizing ourselves with modern frameworks like React, Material UI and Tailwind CSS.",
    "development": "We developed a complete solution including authentication, user profile, functional chat with message and emoji sending, user statuses and profile editing. We implemented Material UI for interface components and Tailwind CSS for color theme customization, along with react-router for section navigation.",
    "conclusion": "The project resulted in a functional application that demonstrated our ability to work as a team and learn new technologies quickly. Key learnings include: route handling in React, consumption of component libraries (Material UI), theme implementation with Tailwind CSS, and valuable collaboration skills using Scrum methodology."
  },
  "moneyTracking": {
    "description": "Money Tracking is a web app to manage income/expenses, featuring real-time balance updates and dynamic charts using ECharts. Built with Vanilla JS, it allows recording transactions, auto-calculating totals, and displaying percentages in an interactive chart.",
    "shortDescription": "Income/expense tracker with dynamic charts in Vanilla JS.",
    "objective": "The project was created to build a financial control system with graphical visualization, aiming to master DOM manipulation, dynamic calculations in JavaScript, and the use of external libraries like ECharts.",
    "development": "I developed a transaction input, automatic balance calculations, record deletion with real-time updates, and an interactive chart (ECharts) that reflects changes. All with modular JavaScript and no frameworks.",
    "conclusion": "The project strengthened my DOM manipulation and dynamic calculation skills. Key learnings included integrating external libraries (ECharts), using JavaScript classes for code organization, and solving challenges like auto-updating the chart when deleting entries."
  },
  "formDesign": {
    "description": "Form Design is an interactive registration form built with Vanilla JS and CSS. It lets users complete their data step-by-step with dynamic validations and a visual progress bar, ensuring a smooth and error-free experience.",
    "shortDescription": "Interactive form with dynamic validations and visual progress tracking.",
    "objective": "The project was created to master DOM manipulation and form validations without frameworks. The main goal was to build a reusable solution for intuitive UX in registration systems.",
    "development": "I implemented real-time validations (email, phone, password), a progress navigation bar, buttons to move forward/backward without page reloads, and toggleable password fields. All using pure JavaScript and CSS.",
    "conclusion": "The project strengthened my DOM manipulation and custom validation skills. I learned to create dynamic interfaces without external libraries and solved challenges like multi-step navigation without reloads."
  },
  "stivSound": {
    "description": "StivSound is an online music player that lets users listen to predefined songs with a responsive design. Built with pure JavaScript, it features essential playback controls (play/pause, skip tracks) and fetches audio files from Firebase Storage.",
    "shortDescription": "Online music player with Vanilla JS and Firebase Storage.",
    "objective": "The project was created to learn how to handle and control audio files in a web app using JavaScript, improve DOM manipulation, and leverage classes for better code structure.",
    "development": "I developed song playback (play/pause, next/previous), real-time duration counters, playlist shuffling, and song removal. This involved fetching files from Firebase Storage and using the JavaScript Audio API.",
    "conclusion": "The project strengthened my DOM manipulation and web audio skills. Key learnings included using JavaScript classes for modular code, integrating Firebase Storage for file hosting, and solving challenges like playback counter synchronization."
  },
  "oldPortfolio": {
    "description": "Old Portfolio was my first personal portfolio hosted on my own domain, developed with Next.js as my first approach to server-side rendering (SSR). It featured sections such as home, about me, projects, and contact. I implemented features like dark/light mode with Tailwind, manual translations using i18next, modals to display detailed information for each project, and a contact form connected to the Resend API to send emails directly to my inbox.",
    "shortDescription": "My first Next.js portfolio with SSR, translations, and a functional contact form.",
    "objective": "The goal was to learn how to work with Next.js and its native functionalities (Image, Link, routing), practice SSR, and improve the presentation of my work. I also wanted to implement a translation system with i18next, handle themes with Tailwind, and develop a form that sends emails using Resend, including setting up credentials and environment variables for a custom domain.",
    "development": "I structured the portfolio with Next.js using server-side rendering to optimize SEO and loading performance. I implemented dark mode with Tailwind, manual translations with i18next, and custom routing. Each project had a modal with detailed information, and I used a local JS file as a data source to list projects. The contact form used Resend to send emails, managing environment variables and properly configuring credentials for my domain. I also added filters to organize projects and ensured the site was fully responsive.",
    "conclusion": "This project marked my first experience with Next.js and technologies like Tailwind and i18next. I learned about SSR, email API configuration, environment variables, and handling local data. Despite its design limitations compared to my current portfolio, it remains a functional piece and an important milestone in my learning journey, as it allowed me to acquire fundamental skills for more complex projects."
  },
  "youtubeDesign": {
    "description": "YouTube Design is a clone of YouTube's homepage UI, built with pure HTML and CSS. It features an interactive sidebar (toggleable with JavaScript) and a responsive design that adapts to different screen sizes.",
    "shortDescription": "YouTube UI clone with HTML/CSS and functional sidebar.",
    "objective": "The project aimed to strengthen my CSS Grid skills and basic DOM manipulation with JavaScript. The main goal was to replicate YouTube's design accurately while adding interactive sidebar functionality.",
    "development": "I recreated the UI layout using CSS Grid and implemented a button to toggle the sidebar with JavaScript. The design is fully responsive, working on mobile, tablet, and desktop.",
    "conclusion": "This project helped me master CSS Grid and take my first steps in DOM manipulation with JavaScript. Key learnings included handling click events and structuring HTML/CSS for complex UI clones."
  },
  "facebookDesign": {
    "description": "Facebook Design is a clone of Facebook's classic login page, built with HTML and CSS. It features a responsive layout using Flexbox and media queries, accurately replicating the original UI.",
    "shortDescription": "Clone of Facebook's classic login page with HTML/CSS and Flexbox.",
    "objective": "This project was my first hands-on exercise after an HTML/CSS course, aiming to master the box model, Flexbox, and responsive design. I documented each step over 8 days to solidify my learning.",
    "development": "I recreated the login interface using Flexbox for the main layout and media queries for mobile adaptability. The code was split into separate files (HTML/CSS) following class organization best practices.",
    "conclusion": "This project laid the foundation for my responsive web design skills. Key learnings included Flexbox usage, media queries implementation, and the value of development process documentation."
  }
}
